// <auto-generated />
using System;
using K.Data.MSSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace K.Data.Migrations
{
    [DbContext(typeof(KanbanDbContext))]
    partial class KanbanDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("K.Models.Columna", b =>
                {
                    b.Property<int>("ColumnaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "columnaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColumnaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "nombre");

                    b.Property<int>("Orden")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "orden");

                    b.Property<int>("TableroId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "tableroId");

                    b.HasKey("ColumnaId");

                    b.HasIndex("TableroId");

                    b.ToTable("Columnas", (string)null);
                });

            modelBuilder.Entity("K.Models.Comentario", b =>
                {
                    b.Property<int>("ComentarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "comentarioId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComentarioId"));

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasAnnotation("Relational:JsonPropertyName", "fechaRegistro");

                    b.Property<int>("HistoriaId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "historiaId");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "texto");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "usuarioId");

                    b.HasKey("ComentarioId");

                    b.HasIndex("HistoriaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentarios", (string)null);
                });

            modelBuilder.Entity("K.Models.Etiqueta", b =>
                {
                    b.Property<int>("EtiquetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "etiquetaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EtiquetaId"));

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasAnnotation("Relational:JsonPropertyName", "color");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "nombre");

                    b.Property<int>("TableroId")
                        .HasColumnType("int");

                    b.HasKey("EtiquetaId");

                    b.HasIndex("TableroId", "Nombre")
                        .IsUnique();

                    b.ToTable("Etiquetas", (string)null);
                });

            modelBuilder.Entity("K.Models.Historia", b =>
                {
                    b.Property<int>("HistoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "historiaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoriaId"));

                    b.Property<int>("ColumnaId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "columnaId");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasAnnotation("Relational:JsonPropertyName", "descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasAnnotation("Relational:JsonPropertyName", "fechaCreacion");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "fechaVencimiento");

                    b.Property<int>("Orden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2147483647)
                        .HasAnnotation("Relational:JsonPropertyName", "orden");

                    b.Property<int?>("ResponsableId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "responsableId");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasAnnotation("Relational:JsonPropertyName", "titulo");

                    b.HasKey("HistoriaId");

                    b.HasIndex("ResponsableId");

                    b.HasIndex("ColumnaId", "Orden");

                    b.ToTable("HistoriasUsuario", (string)null);
                });

            modelBuilder.Entity("K.Models.HistoriaEtiqueta", b =>
                {
                    b.Property<int>("HistoriaId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "historiaId");

                    b.Property<int>("EtiquetaId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "etiquetaId");

                    b.HasKey("HistoriaId", "EtiquetaId");

                    b.HasIndex("EtiquetaId");

                    b.ToTable("HistoriasEtiquetas", (string)null);
                });

            modelBuilder.Entity("K.Models.Tablero", b =>
                {
                    b.Property<int>("TableroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "tableroId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableroId"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasAnnotation("Relational:JsonPropertyName", "descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasAnnotation("Relational:JsonPropertyName", "fechaCreacion");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "titulo");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "usuarioId");

                    b.HasKey("TableroId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tableros", (string)null);
                });

            modelBuilder.Entity("K.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "usuarioId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasAnnotation("Relational:JsonPropertyName", "fechaCreacion");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "nombreUsuario");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasAnnotation("Relational:JsonPropertyName", "passwordHash");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("K.Models.Columna", b =>
                {
                    b.HasOne("K.Models.Tablero", "Tablero")
                        .WithMany("Columnas")
                        .HasForeignKey("TableroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tablero");
                });

            modelBuilder.Entity("K.Models.Comentario", b =>
                {
                    b.HasOne("K.Models.Historia", "Historia")
                        .WithMany("Comentarios")
                        .HasForeignKey("HistoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("K.Models.Usuario", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Historia");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("K.Models.Etiqueta", b =>
                {
                    b.HasOne("K.Models.Tablero", "Tablero")
                        .WithMany("Etiquetas")
                        .HasForeignKey("TableroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tablero");
                });

            modelBuilder.Entity("K.Models.Historia", b =>
                {
                    b.HasOne("K.Models.Columna", "Columna")
                        .WithMany("Historias")
                        .HasForeignKey("ColumnaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("K.Models.Usuario", "Responsable")
                        .WithMany("HistoriasAsignadas")
                        .HasForeignKey("ResponsableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Columna");

                    b.Navigation("Responsable");
                });

            modelBuilder.Entity("K.Models.HistoriaEtiqueta", b =>
                {
                    b.HasOne("K.Models.Etiqueta", "Etiqueta")
                        .WithMany("HistoriasEtiquetas")
                        .HasForeignKey("EtiquetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("K.Models.Historia", "Historia")
                        .WithMany("HistoriasEtiquetas")
                        .HasForeignKey("HistoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etiqueta");

                    b.Navigation("Historia");
                });

            modelBuilder.Entity("K.Models.Tablero", b =>
                {
                    b.HasOne("K.Models.Usuario", "Usuario")
                        .WithMany("Tableros")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("K.Models.Columna", b =>
                {
                    b.Navigation("Historias");
                });

            modelBuilder.Entity("K.Models.Etiqueta", b =>
                {
                    b.Navigation("HistoriasEtiquetas");
                });

            modelBuilder.Entity("K.Models.Historia", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("HistoriasEtiquetas");
                });

            modelBuilder.Entity("K.Models.Tablero", b =>
                {
                    b.Navigation("Columnas");

                    b.Navigation("Etiquetas");
                });

            modelBuilder.Entity("K.Models.Usuario", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("HistoriasAsignadas");

                    b.Navigation("Tableros");
                });
#pragma warning restore 612, 618
        }
    }
}
